# [common] 服务管理
[common]
#IPv6的文字地址或主机名必须包含在内
#在方括号中，如“[：：1]：80”、“[ipv6主机]：http”或“[ipv6主机%zone]：80”
#对于单个“server_addr”字段，不需要方括号，如“server_ addr=：：”。
# 连接服务器地址
server_addr = 0.0.0.0
# 连接服务器端口
server_port = 7000

#连接服务器超时时间
dial_server_timeout = 10

# 保持长链接
dial_server_keepalive = 7200

#如果要通过http代理或socks5代理或ntlm代理连接FRP，可以在此处或全局环境变量中设置http_proxy
#它仅在协议为tcp时工作
# http_proxy = http://user:passwd@192.168.1.128:8080
# http_proxy = socks5://user:passwd@192.168.1.128:1080
# http_proxy = ntlm://user:passwd@192.168.1.128:2080

# 控制台或真实日志文件路径，如./frpc.log
;log_file = ./frpc.log

# 日志等级 trace, debug, info, warn, error
log_level = info
# 日志保留最大天数
log_max_days = 3

# 当log_file为控制台时禁用日志颜色，默认值为false
disable_log_color = false

#对于身份验证，应与frps.ini相同
#authenticate_heartbeats指定是否在发送给FRP的心跳中包含身份验证令牌。默认情况下，此值为false。
authenticate_heartbeats = false

# authenticate_new_work_conns指定是否在发送到FRP的新工作连接中包括身份验证令牌。默认情况下，此值为false。
authenticate_new_work_conns = false

# auth token 连接token
token =

# oidc_client_id指定在AuthenticationMethod＝“oidc”时用于在oidc身份验证中获取令牌的客户端id。
#默认情况下，此值为“”。
oidc_client_id =

# oidc_client_secret指定在AuthenticationMethod＝“oidc”时用于在oidc身份验证中获取令牌的客户端密钥。
#默认情况下，此值为“”。
oidc_client_secret =

# 如果AuthenticationMethod=“oidc”，则oidc_audience指定oidc身份验证中令牌的访问群体。默认情况下，此值为“”。
oidc_audience =

#oidc_token_endpoint_url指定实现oidc令牌端点的url。
#如果AuthenticationMethod==“OIDC”，它将用于获取OIDC令牌。默认情况下，此值为“”
oidc_token_endpoint_url =

#oidc_additional_xxx指定要发送到oidc令牌端点的附加参数。
#例如，如果要指定“audience”参数，可以按如下方式进行设置。
#frp将在附加参数中添加“观众=<value>”和“var1=<value>”。
#oidc_additional_audience=https://dev.auth.com/api/v2/
#oidc_additional_var1=foobar
# 设置web管理界面参数
admin_addr = 127.0.0.1
admin_port = 7400
admin_user = admin
admin_pwd = admin

#管理资产目录。默认情况下，这些资产与frpc捆绑。
# assets_dir = ./static

# 将提前建立连接，默认值为零
pool_count = 5

# 如果使用tcp流多路复用，默认值为true，必须与FRP相同
tcp_mux = true

#指定tcp mux的保持活动间隔。
#仅当tcp_mux为真时有效。
tcp_mux_keepalive_interval = 60

# 您的代理名称
user = chrelyonly

#决定是否在首次登录失败时退出程序，否则继续重新登录到frps
#默认值为true
login_fail_exit = true

#用于连接到服务器的通信协议
#现在它支持tcp、kcp和websocket，默认为tcp
protocol = tcp

#连接服务器时设置客户端绑定ip，默认为空。
#只有当protocol=tcp或websocket时，才会使用该值。
connect_server_local_ip = 0.0.0.0

#如果tls_enable为真，frpc将通过tls连接FRP
tls_enable = false
# 证书文件
# tls_cert_file = client.crt
# 证书文件
# tls_key_file = client.key
# 证书文件
# tls_trusted_ca_file = ca.crt
# 证书域名
# tls_server_name = example.com

# 指定dns服务器，因此frpc将使用该服务器而不是默认服务器
# dns_server = 8.8.8.8

#要以“，”分隔的代理名称
#默认值为空，表示所有代理
# start = ssh,dns

#心跳配置，不建议修改默认值
#heartbeat_interval的默认值为10，heartbeart_timeout为90。设置负值
#以禁用它。
heartbeat_interval = 30
heartbeat_timeout = 90

# 客户端的附加元信息
meta_var1 = 123
meta_var2 = 234

#指定udp数据包大小，单位为字节。如果未设置，默认值为1500。
#客户端和服务器之间的此参数应相同。
#它影响udp和sudp代理。
udp_packet_size = 1500


#包括代理的其他配置文件。
# includes = ./confd/*.ini

#默认情况下，如果启用tls，frpc将连接FRP和第一个自定义字节。
#如果DisableCustomTLSFirstByte为true，frpc将不发送该自定义字节。
disable_custom_tls_first_byte = false

#在管理侦听器中启用golang pprof处理程序。
#必须首先设置管理端口。
pprof_enable = false

#“ssh”是唯一的代理名称
#如果[common]部分中的用户不为空，则将其更改为｛user｝。｛代理｝如“your_name.ssh”
[ssh]
# tcp | udp | http | https | stcp | xtcp, default is tcp
type = tcp
# 代理的地址
local_ip = 127.0.0.1
# 代理的端口
local_port = 22
#限制此代理的带宽，单位为KB和MB
bandwidth_limit = 100MB
# true或false，如果为true，frps和frpc之间的消息将被加密，默认值为false
use_encryption = false
#如果为true，消息将被压缩
use_compression = false
# 端口转发到 服务器指定的
#如果remote_port为0，frps将为您分配一个随机端口
remote_port = 6001
#FRP将为同一组中的代理进行负载平衡连接
group = test_group
#组应具有相同的组密钥
group_key = 123456

#启用后端服务的运行状况检查，它现在支持“tcp”和“http”
#frpc将连接本地服务的端口以检测其健康状态
health_check_type = tcp
#运行状况检查连接超时
health_check_timeout_s = 3
#如果连续失败3次，代理将从frps中删除
health_check_max_failed = 3
#每10秒将进行一次健康检查
health_check_interval_s = 10
#每个代理的附加元信息
meta_var1 = 123
meta_var2 = 234

;# 案例 ****************
;# tcp穿透ssh端口
;[ssh_random]
;type = tcp
;local_ip = 127.0.0.1
;local_port = 22
;remote_port = 0
;
;#如果要公开多个端口，请在节名称中添加“range:”前缀
;#frpc将生成多个代理，如“tcp_port_6010”、“tcp_port_6011”等。
;# # tcp穿透多个端口
;[range:tcp_port]
;type = tcp
;local_ip = 127.0.0.1
;local_port = 6010-6020,6022,6024-6028
;remote_port = 6010-6020,6022,6024-6028
;use_encryption = false
;use_compression = false
;#udp穿透
;[dns]
;type = udp
;local_ip = 114.114.114.114
;local_port = 53
;remote_port = 6002
;use_encryption = false
;use_compression = false
;#udp穿透多个端口
;[range:udp_port]
;type = udp
;local_ip = 127.0.0.1
;local_port = 6010-6020
;remote_port = 6010-6020
;use_encryption = false
;use_compression = false
;
;#http穿透
;#将域名解析为[server_addr]，以便您可以使用http://web01.yourdomain.com浏览web01和http://web02.yourdomain.com浏览web02[web01]
;type = http
;local_ip = 127.0.0.1
;local_port = 80
;use_encryption = false
;use_compression = true
;#http用户名和密码是http协议的安全认证
;#如果未设置，则无需认证即可访问此custom_domains
;http_user = admin
;http_pwd = admin
;#如果frps的域是frps。com，然后您可以通过URL访问[web01]代理http://web01.frps.com
;subdomain = web01
;custom_domains = web01.yourdomain.com
;#位置仅适用于http类型
;locations = /,/pic
;#如果http基本自动用户是abc，则将请求路由到此服务
;#route_by_http_user=abc
;host_header_rewrite = example.com
;#前缀为“header_”的参数将用于更新http请求头
;header_X-From-Where = frp
;health_check_type = http
;#frpc将向本地http服务发送GET http请求“/status”
;#当http服务返回2xx http响应代码时，该服务处于活动状态
;health_check_url = /status
;health_check_interval_s = 10
;health_check_max_failed = 3
;health_check_timeout_s = 3
;
;[web02]
;type = https
;local_ip = 127.0.0.1
;local_port = 8000
;use_encryption = false
;use_compression = false
;subdomain = web01
;custom_domains = web02.yourdomain.com
;#如果不为空，frpc将使用代理协议将连接信息传输到本地服务
;#v1或v2或空
;proxy_protocol_version = v2
;
;[plugin_unix_domain_socket]
;type = tcp
;remote_port = 6003
;#如果定义了插件，则local_ip和local_ port无效
;#该插件将处理从FRP获得的连接
;plugin = unix_domain_socket
;#带有插件所需前缀“plugin_”的参数
;plugin_unix_path = /var/run/docker.sock
;
;[plugin_http_proxy]
;type = tcp
;remote_port = 6004
;plugin = http_proxy
;plugin_http_user = abc
;plugin_http_passwd = abc
;
;[plugin_socks5]
;type = tcp
;remote_port = 6005
;plugin = socks5
;plugin_user = abc
;plugin_passwd = abc
;
;[plugin_static_file]
;type = tcp
;remote_port = 6006
;plugin = static_file
;plugin_local_path = /var/www/blog
;plugin_strip_prefix = static
;plugin_http_user = abc
;plugin_http_passwd = abc
;
;[plugin_https2http]
;type = https
;custom_domains = test.yourdomain.com
;plugin = https2http
;plugin_local_addr = 127.0.0.1:80
;plugin_crt_path = ./server.crt
;plugin_key_path = ./server.key
;plugin_host_header_rewrite = 127.0.0.1
;plugin_header_X-From-Where = frp
;
;[plugin_https2https]
;type = https
;custom_domains = test.yourdomain.com
;plugin = https2https
;plugin_local_addr = 127.0.0.1:443
;plugin_crt_path = ./server.crt
;plugin_key_path = ./server.key
;plugin_host_header_rewrite = 127.0.0.1
;plugin_header_X-From-Where = frp
;
;[plugin_http2https]
;type = http
;custom_domains = test.yourdomain.com
;plugin = http2https
;plugin_local_addr = 127.0.0.1:443
;plugin_host_header_rewrite = 127.0.0.1
;plugin_header_X-From-Where = frp
;
;[secret_tcp]
;#如果类型为secret tcp，则remote_port无效
;#想要连接本地端口的用户应该部署另一个带有stcp代理的frpc，角色是访问者
;type = stcp
;#用于访客身份验证的sk
;sk = abcdefg
;local_ip = 127.0.0.1
;local_port = 22
;use_encryption = false
;use_compression = false
;
;#在stcp服务器和stcp访问者中，frpc的用户应相同
;[secret_tcp_visitor]
;#frpc角色访问者->frps->frpc角色服务器
;role = visitor
;type = stcp
;server_name = secret_tcp
;sk = abcdefg
;bind_addr = 127.0.0.1
;bind_port = 9000
;use_encryption = false
;use_compression = false
;
;[p2p_tcp]
;type = xtcp
;sk = abcdefg
;local_ip = 127.0.0.1
;local_port = 22
;use_encryption = false
;use_compression = false
;
;[p2p_tcp_visitor]
;role = visitor
;type = xtcp
;server_name = p2p_tcp
;sk = abcdefg
;bind_addr = 127.0.0.1
;bind_port = 9001
;use_encryption = false
;use_compression = false
;
;[tcpmuxhttpconnect]
;type = tcpmux
;multiplexer = httpconnect
;local_ip = 127.0.0.1
;local_port = 10701
;custom_domains = tunnel1
# route_by_http_user = user1
